alertPage:
  addSelectorLabel: 添加选择器
  alertGroups: 告警组
  cluster: 集群
  commonRules:
    cpuUsagePercent: CPU 使用率
    customClusterBackupFailed: 自定义集群 Etcd 备份失败告警
    databaseUsage: 数据库使用率接近配额 500M
    diskReadDelay: 磁盘读取延迟
    diskReadIOPS: 磁盘读取 IOPS
    diskReadThroughput: 磁盘读取吞吐量
    diskRemainingPercent: 磁盘剩余可用率
    diskWriteIOPS: 磁盘写入 IOPS
    diskWriteThroughput: 磁盘写入吞吐量
    etcdDiskBackend: Etcd latency distributions of commit called by backend
    etcdDiskWal: Etcd latency distributions of fsync called by wal
    etcdSnapDelay: etcd 快照延迟时间
    fileDescriptorUsagePercent: 文件描述符使用率
    highCpuLoad: 高 CPU 负载
    highNodeMemoryUtilization: 节点内存利用率高
    inodesUsagePercent: inodes 使用率
    leaderChanges: etcd 集群中正在发生大量的 leader 变更
    noDiskIsRunning: 节点磁盘在 24 小时内已满载
    podRebootTimes: POD 重启次数
    ramUsagePercent: 内存使用率
  comparison:
    equal: 等于
    greater-or-equal: 大于或等于
    greater-than: 大于
    has-value: 不为空
    less-or-equal: 小于或等于
    less-than: 小于
    not-equal: 不等于
  config:
    reset: 重置配置
    save: 保存
  create: 创建
  customLabel:
    addText: 添加标签和注释
    customStepOneOption:
      label: 标签
      message: 注释
    customStepTwoOption:
      annotations: 注释
      custom: 自定义
      label: 标签
    error:
      key: 不符合自定义标签 '键' 规则
      uneq: 相同类型的自定义消息 '键' 不能相同
      value: 自定义标签 '值' 不能为空
    note: "注意: notification.tmpl 模板目前不支持 webhook，如需配置自动告警标签和消息请前往 “工具->告警” 添加相关配置。"
    placeholder:
      key: 键
      value: 值
    table:
      stepOne: 添加自定义
      stepThree: 添加
      stepTwo: 选择
    title: 自定义告警标签和注释
  index:
    addAlert: 添加告警规则
    addAlertGroup: 添加告警组
    config: 告警配置
    noAlerts: 当前没有配置告警规则。
    table:
      condition: 条件
      displayCondition:
        available: "{percent}% 可用"
        cpuUsage: CPU 使用超过 {percent}%
        expression: 表达式
        failure: 失败
        happens: 发生
        memUsage: 内存使用超过 {percent}%
        notReady: 未就绪
        notRunning: 未运行
        notScheduled: 未调度
        notready: 未就绪
        restarted: 在 {interval} 分钟内重启 {times} 次
        unhealthy: 不健康
      noData: 没有配置告警规则
      noGroup: 未分配告警组
      noMatch: 没有告警与当前搜索匹配。
      recipients: 接收者
      target: 目标
  items: 项目
  na: 未配置
  new:
    addHeader: 添加告警组
    addRuleHeader: 添加告警规则
    editHeader: 编辑告警组
    editRuleHeader: 编辑告警规则
  newOrEdit:
    addRecipient: 添加接收者
    alert: 告警
    alertRule: 告警规则
    and: 和
    available: 可用
    commonRules:
      error: 获取图表数据失败
      label: 常用规则
      noData: 图表无数据
      placeholder: 选择告警规则
      podRebootTimesTips: 请将键 (Key) 中的特殊符号转换为下划线 (_)
    cpuUsage: CPU 预留超过
    createOne: 创建一条
    critical: 危险
    enableMonitoring: 启用监控
    expression:
      error: 获取图表数据失败
      label: 表达式
      noData: 图表无数据
      placeholder: 输入表达式
    failed: 扫描失败
    for: 持续
    groupIntervalSeconds:
      helpText: 添加触发报警的规则进组后，发送告警的间隔。
      label: 告警组间隔时长
    groupWaitSeconds:
      helpText: 告警触发后发送的等待时长。
      label: 告警组等待时长
    happens: 发生
    info: 信息
    inherited:
      enabled: 启用 - 从组继承高级选项
      label: 组继承
    initialWait: 等待时间
    initialWaitHelpText: 在触发告警到发送通知需要等待多长时间。
    interval: 时间间隔
    is: 是
    lessThan: 少于
    memUsage: 内存预留超过
    minutes: 分钟
    monitoringDisabled: 表达式类型不可用，点击
    moreTarget: 更多的规则类型
    nameRequired: 需要填写告警标题
    noNotifierHelpText: 没有定义通知规则，去
    nodePlaceholder: 选择主机
    nodeRequired: 需要选择主机
    nodeSelectorRequired: 需要主机选择器
    normal: 正常
    notReady: 未就绪
    notRunning: 未运行
    notScheduled: 未调度
    notifierPlaceholder: 选择通知
    podPlaceholder: 选择 Pod
    recipient:
      helpText: 默认情况下使用通知程序中设置的值，您可以用另一个值覆盖它。
    removeAlert: 删除告警规则
    repeatIntervalHelpText: 当告警处于活动状态时，重复发送通知的时间间隔。
    repeatIntervalSeconds:
      helpText: 告警发送后再次发送的间隔
      label: 重复间隔
    resourcePlaceholder: 选择资源
    restarted: 重启
    restartedTimes: 最后重启时间
    run: 扫描完成
    sendA: 发送
    showAdvanced: 显示高级选项
    systemServicePlaceholder: 选择系统服务
    to: 到
    unhealthy: 不健康
    unit:
      bytes: Bytes
      mbPerSecond: MB/S
      millisecond: MS
      percent: "%"
      second: S
      times: 次
      timesPerSecond: 次/秒
    warning: 警告
    whenA: 当
    whenAn: 当
    workloadTypePlaceholder: 选择工作负载类型
  project: 项目
  resourceKinds:
    DaemonSet: DaemonSet
    Deployment: Deployment
    Node: Node
    Pod: Pod
    StatefulSet: StatefulSet
  save: 保存
  targetTypes:
    cisScan: CIS 扫描
    daemonset: Daemonset
    deployment: Deployment
    event: Event
    metric: Metric
    node: Node
    nodeSelector: Node Selector
    pod: Pod
    podRebootTimes: Pod 重启次数
    statefulset: Statefulset
    systemService: System Service
    undefined: 无
    workload: Workload
    workloadSelector: Workload Selector
allWorkloads:
  namespace: "命名空间: {name}"
appDetailPage:
  answers:
    detail: 自定义应用应答
    title: 应答
    variable: 键
  configMaps:
    detail: 与此应用关联的配置映射
    nodata: 此应用程序没有配置映射
    title: 配置映射
  endpoints:
    detail: 此应用的公共接入点
    endpoint: Endpoint
    noData: 此应用未创建公开接入点
    noMatch: 没有满足当前搜索的公共接入点
    protocol: 协议
    title: 端点
  header: "App: {appName}"
  ingress:
    detail: 此应用创建的入口规则
    nodata: 此应用未创建入口规则
    title: Ingress 规则
  notes:
    detail: 关于如何使用此应用的说明
    title: 注释
  secrets:
    detail: 此应用相关的密文 (Secrets)。
    nodata: 此应用未使用密文
    title: 密文
  services:
    detail: 此应用创建的服务
    nodata: 此应用未创建服务
    title: 服务
  volumes:
    detail: 此应用创建的持久卷声明 (PVC)。
    nodata: 此应用未创建持久卷声明
    title: 卷
  workloads:
    detail: 此应用创建的工作负载
    nodata: 此应用未创建工作负载
    title: 工作负载
authorizedEndpoint:
  enabled:
    label: 此地址必须是能够访问 k8s api-server 的域名或者 IP。在 Rancher Server 不可用时，可使用包含此地址的 kubecfg 文件，通过命令 kubectl --context 直接访问 k8s 集群。
  fqdn:
    label: FQDN（此域名和右侧的 CA 证书可不用填写）
conditionSections:
  detail: 当前 {resourceType} 运行状态
  noData: 没有条件
  noMatch: 没有条件与当前搜索匹配
  table:
    lastState: 上一次状态
    lastUpdate: 最后更新
    message: 消息
    reason: 状态原因
    status: 状态
    type: 类型
  title: 状态
containerChoices:
  containerOption: "{name}"
  hostGroup: "主机: {name}"
  hostGroupWithState: "主机: {name} ({state})"
  unknownHost: "主机: ???"
containerLogs:
  clear: 清除屏幕
  combined: 合并日志
  download: 下载日志
  onlyCombined: "<b>注意: </b>此容器运行时带有 TTY(-t)参数，仅有合并的标准输出和标准错误日志可见。"
  previous: 以前的容器
  protip: "高级技巧: 点击查看日志时按住 {key} 键在新窗口中打开"
  scrollBottom: 回到底部
  scrollTop: 回到顶部
  status:
    closed: 已关闭
    connected: 已连接
    connecting: 连接中...
    disconnected: 已断开
    initializing: 初始化...
  stderr: 标准错误
  stdout: 标准输出
  title: "日志查看: "
  wrapLines: 自动换行
cruClusterTemplate:
  default:
    label: 默认修订版本
  edit:
    label: 编辑集群模板
  infoBanner: 模板只允许为 RKE 集群保存和重用配置选项。
  members:
    detail: 与单个成员共享此集群模板，或将其公开给组织。这将影响此集群模板中的所有模板修订。
    label: 共享模板
  name:
    label: 模板名称
  revisionName:
    help: 不是必须，但建议使用描述性名称，以帮助轻松定位正确的修订。
    label: 模板修订名称
  selectRevision:
    label: 选择默认修订
  source:
    label: Source Revision
cruVolume:
  define:
    addActionLabel: 确定
  name:
    placeholder: e.g. myvol
  source:
    detail: 配置选定存储源的选项
    label: 存储源
    prompt: 选择存储源...
    title: 源配置
  sourcePrompt: 需要先选择卷插件...
  title:
    new: 配置临时卷
deleteEksCluster:
  accessKey:
    label: Access Key
    placeholder: AWS access key
  deleteCluster: 删除集群
  deletingCluster: 集群删除中...
  error:
    accessKey: 必须设置 Access key。
    secretKey: 必须设置 Secret key。
    sessionToken: 必须设置 Session token。
  help: 此集群是通过临时令牌创建的，请提供新的令牌来删除它。
  secretKey:
    label: Secret Key
    placeholder: Your AWS secret key
    provided: Provided
  sessionToken:
    deleteLabel: Session Token
    label: Session Token <em class='text-muted'>可选</em>
    placeholder: AWS session token
    provided: Provided
  title: 确定删除集群 {clusterName} 吗?
  updateKeys: 更新 Keys
  updatingKeys: Keys 更新中
dnsPage:
  noData: 没有可以显示的 DNS 记录。
  noMatch: 没有匹配当前搜索的记录。
  table:
    clusterIpDetail: "集群 IP: {ip}"
    target: 目标
  type:
    alias: 别名
    arecord: 外部 IP
    clusterIp: Cluster IP
    cname: 主机名
    selector: 选择器
    unknown: 未知
    workload: 工作负载
editDns:
  add:
    alias: 添加服务
    arecord: 添加 IP
    selector: 添加选择器
    workload: 添加工作负载
  description:
    placeholder: "例如: 当前 MyApp 版本"
  errors:
    mixedAlias: 别名不能以 CNAME 和其他记录的组合为目标。
    multipleCname: 别名不能指向多个 CNAME 记录
    selectorRequired: 必须配置一个或多个"目标标签选择器"
    targetRequired: 必须配置一个或多个"目标服务/工作负载/主机名/域名"
  externalIPs:
    addActionLabel: 添加外部 IP
    placeholder: "例如: 80.11.12.10"
    value: 外部 IPs
  externalTrafficPolicy:
    cluster: Cluster
    label: 外部流量策略
    local: Local
  healthCheckNodePort:
    label: 健康检查节点端口
    placeholder: "例如: 8080"
  kind:
    clusterIP: Cluster IP(仅集群内部通信)
    externalName: ExternalName
    headless: Headless Service
    label: 类型
    loadBalancer: L4 负载均衡器
    nodePort: NodePort(所有主机端口均可访问)
  loadBalancerIP:
    label: Load Balancer IP
    placeholder: "例如: 78.11.24.19"
  loadBalancerSourceRanges:
    addActionLabel: 添加 ip 源范围
    placeholder: "例如: 143.231.0.0/16"
    value: 负载均衡器 ip 源范围
  name:
    placeholder: e.g. myapp
  placeholder:
    arecord: "例如: 19.82.2.24"
    cname: "例如: example.com"
  prompt:
    alias: 选择服务...
    workload: 选择工作负载...
  publishNotReadyAddresses:
    all: 所有接入点
    label: 对外发布的地址
    readyOnly: 仅就绪接入点
  recordType:
    alias: 服务别名
    arecord: 外部 IP 地址
    clusterIp: Cluster IP
    cname: 外部域名
    label: 解析到
    selector: Pod
    workload: 工作负载
  selector:
    addActionLabel: 添加标签选择器
    keyLabel: 标签
    label: 容器选择器
  sessionAffinity:
    detail: 根据源 IP 将连接映射到一致的目标
    label: 启用会话保持
    title: 会话保持
  sessionAffinityConfig:
    label: Session 保持时间
    placeholder: "例如: 10800"
  target:
    alias: 目标 DNS 记录
    arecord: 目标 IP 地址
    cname: 目标域名
    selector: 目标 Pod 选择器
    workload: 目标工作负载
  title:
    edit: 编辑 DNS 记录
    new: 添加 DNS 记录
    view: "记录: {name}"
f5TLSPage:
  addTLS: 添加证书
  form:
    clientSSL:
      label: Client SSL
      placeholder: "例如: /Common/clientssl"
    hosts:
      add: 添加域名
      placeholder: "例如: example.com"
    reference: Reference
    serverSSL:
      label: Server SSL
      placeholder: "例如: /Common/serverssl"
    termination:
      label: Termination
      placeholder: 请选择...
  header:
    edit: 编辑证书
    new: 添加证书
    view: "证书: {name}"
  table:
    noData: 没有配置TLS证书
featureFlags:
  features:
    fleet: 启动 Rancher 时，安装 Fleet
    istioVirtualServiceUi: 启用此功能将为 Istio 公开额外的 UI 页面
    projectPipelineServiceUI: 启用此功能将显示项目流水线导航菜单
    proxy: 对 Kubernetes API 请求使用新的实验性代理。
    unsupportedStorageDrivers: 启用此功能将为持久卷和存储类公开不受支持的存储驱动程序选项。
    virtaitechGpuServiceUI: 启用此功能将在部署服务时允许用户设置 vGpus 的预留实例数量
  table:
    description: 描述
    name: 名称
    noData: 没有特征数据
    noMatch: 没有与当前搜索匹配的功能
    restart: 重启生效
    state: 状态
  warningHeader: 您应该谨慎地启用这些功能，它们应该被视为可能会给您的系统带来问题的 beta 功能。此外，一些功能 (非动态) 需要重新启动 Rancher 服务才能启用。
formBasicPodSecurityPolicy:
  allowPrivilegeEscalation:
    disable: 否
    enable: "是: 运行允许从其父级升级特权的容器"
    label: 允许提升特权
  defaultAllowPrivilegeEscalation:
    disable: 否
    enable: "是: 控制进程可以获得父进程获得更多特权"
    label: 默认允许提升特权
  detail: 配置基本的 Pod 安全策略
  hostIPC:
    disable: 否
    enable: "是: 主机 IPC 命名空间"
    label: 主机 IPC
  hostNetwork:
    disable: 否
    enable: "是: 使用主机网络"
    label: 主机网络
  hostPID:
    disable: 否
    enable: "是: 主机 PID 命名空间"
    label: 主机 PID
  privileged:
    disable: 否
    enable: "是: 运行特权容器"
    label: 特权
  readOnlyRootFilesystem:
    disable: 否
    enable: "是: 需要采用只读根文件系统"
    label: 只读根文件系统
  title: 基本策略
formContainerLinks:
  addActionLabel: 添加链接
  alias:
    label: 名称
    placeholder: "例如: database"
  detail: 配置此容器和其他容器的关联关系
  name:
    label: 目标容器
  noData: 没有容器链接
  noMatch: 没有匹配当前搜索的链接
  title: 链接
formCount:
  label: 数量
formFsGroupPodSecurityPolicy:
  detail: 分配拥有 Pod 卷的 FSGroup
  range:
    addLabel: 添加范围
    max:
      label: 最大值
      placeholder: "例如: 6"
    min:
      label: 最小值
      placeholder: "例如: 1"
  rule:
    mustRunAs: MustRunAs - 至少需要指定一个范围，使用第一个范围的最小值作为默认值，对照第一个范围中的第一个 ID 进行验证。
    runAsAny: RunAsAny - 没有默认值，允许指定任何 fsGroup ID。
  title: FS 组策略
formResourceQuota:
  addQuotaLabel: 添加配额
  errors:
    invalidLimit: "{resource} 配额总共 {total}，已使用 {used}。该已使用应小于或等于 {left}。"
    limitRequired: "{resource} 需要设置。"
    nsDefaultLimitRequired: 命名空间中 {resource} 默认限制必需设置。
    projectLimitRequired: 项目中 {resource} 必须设置。
  resources:
    configMaps: 配置映射
    limitsCpu: CPU 限制
    limitsMemory: 内存限制
    persistentVolumeClaims: PVC
    pods: Pods
    replicationControllers: 副本控制器
    requestsCpu: CPU 预留
    requestsGpuCount: GPU Count
    requestsGpuMemory: GPU Memory
    requestsMemory: 内存保留
    requestsStorage: 存储预留
    requestsStorageClassPVC: StorageClassPVC
    requestsStorageClassStorage: StorageClass存储
    secrets: 密文
    services: 服务
    servicesLoadBalancers: 服务负载均衡器
    servicesNodePorts: 服务节点端口
  table:
    namespaceLimit:
      label: 命名空间默认限制
      memoryPlaceholder: "例如: 1024"
      milliCpuPlaceholder: "例如: 500"
      placeholder: "例如: 10"
    noData: 没有配置资源配额
    projectLimit:
      label: 项目限制
      memoryPlaceholder: "例如: 2048"
      milliCpuPlaceholder: "例如: 2000"
      placeholder: "例如: 50"
      stroageClassPlaceholder: 存储类不存在
    resources:
      available: 可用
      label: 项目资源可用性
      max: 总共
      namespace: 当前命名空间
      reserved: 其他命名空间
    type:
      label: 资源类型
    value:
      label: 限制
      memoryPlaceholder: "例如: 1Gi"
      milliCpuPlaceholder: "例如: 500"
      placeholder: "例如: 10"
formRunAsUserPodSecurityPolicy:
  detail: 控制容器运行时使用的用户 ID。
  range:
    addLabel: 添加范围
    max:
      label: 最大值
      placeholder: "例如: 6"
    min:
      label: 最小值
      placeholder: "例如: 1"
  rule:
    mustRunAs: MustRunAs - 需要配置范围，使用范围的第一个值作为默认值。根据配置的范围进行验证。
    mustRunAsNonRoot: MustRunAsNonRoot - 要求使用非零 runAsUser 启动 Pod，或者在镜像中配置 USER 指令，不提供默认值。
    runAsAny: RunAsAny - 无默认值，允许任何 runAsUser 来指定。
  title: 作为用户策略运行
formSeLinuxodSecurityPolicy:
  detail: 容器的 SELinux 上下文
  level:
    label: 等级
    placeholder: "例如: dev1"
  role:
    label: 角色
    placeholder: "例如: node"
  rule:
    mustRunAs: MustRunAs - 使用 seLinuxOptions 作为默认值，根据 seLinuxOptions 进行验证。
    runAsAny: RunAsAny - 允许指定任何 seLinuxOptions 设置。
  title: SELinux 策略
  user:
    label: 用户
    placeholder: "例如: master"
formUpgrade:
  detail: 服务升级过程中新旧 Pods 更新替换策略。
  strategy:
    batchSize:
      detail: Pod 将批量启动或停止
      label: 批量大小
    custom: 自定义
    label: 升级策略
    maxSurge:
      detail: 可理解为更新的并发数，默认为 1，即每次更新一个 Pod。
      label: 最大浪涌
    maxUnavailable:
      detail: 在任何给定时间内不可用的最大 Pods 数量。
      label: 最大不可用
    minReadySeconds:
      detail: 在 Pod 被视为可用之前，Pods 中的容器需至少运行多长时间。
      label: 最小准备时间
    onDelete: 仅当手动删除旧 Pods 时才启动升级新 Pods。
    orderedReady: 严格按顺序更新并等待准备就绪。
    parallel: 启动所有新 Pods 和停止所有旧 Pods 并行执行。
    progressDeadlineSeconds:
      detail: 一旦超过了部署进度的最后期限，Kubernetes 将会更新进度的状态和原因。
      label: 进度截止时间
    recreate: 删除所有 Pods，然后重新开始。
    rollingUpdate: 滚动更新
    startFirst: "滚动: 先启动新 Pods，再停止旧 Pods。"
    stopFirst: "滚动: 先停止旧 Pods，再启动新 Pods。"
  title: 缩放/升级策略
formUserData:
  isVmPlaceholder: "例如: 虚拟机的配置信息"
  placeholder: "例如: 容器的配置信息"
formVersions:
  dotx: Latest {minor} (允许补丁版本升级)
  downgrade: (不能降级)
  eks:
    helpBlock: 因为 Amazon EKS 运行一个高可用的控制平面，所以您一次只能更新一个小版本。
    label: (EKS 不允许次要版本 > 1 )
  experimental: (实验)
  helpBlock:
    label: "升级 Kubernetes 版本时，请查看<a href=\"https://groups.google.com/forum/#!forum/kubernetes-announce\" target=\"_blank\" rel=\"nofollow noreferrer noopener\">Kubernetes release notes</a>了解功能变化。"
  minorWarning: (minor version >1 not allowed)
  notallowed: (模板不允许)
  unsupported: (不支持)
generic:
  Gibibyte: GiB
  actions: 操作
  activate: 激活
  active: Active
  add: 添加
  advanced: 高级
  all: 全部
  any: 任何
  application: 应用程序
  as: 以
  authorize: 认证&同步代码库
  back: 返回
  bitbucket: Bitbucket
  branch: 分支
  cancel: 取消
  closeModal: 关闭
  cluster: 集群
  collapse: 折叠
  collapseAll: 全部折叠
  comingSoon: 即将推出
  command: 命令
  commit: 构建提交
  completedOf: "{completed} of {total}"
  confirm: 确认
  containers: 容器
  cpu: CPU
  created: 创建时间
  createdDate: "创建时间: {date}"
  custom: 自定义
  customize: 定制
  default: 默认
  description: 描述
  details: 详情
  disable: 禁用
  disabled: 禁用
  displayName: 显示名称
  dockerId: "容器 ID: "
  domainName: 域名
  done: 完成
  download: 下载
  edit: 编辑
  emptyString: ""
  enable: 启用
  enabled: 启用
  entrypoint: 入口
  environment: 环境
  expand: 展开
  expandAll: 全部展开
  experimental: (实验)
  "false": "False"
  from: 来自
  full: 完整
  generic: 常规
  gigabyte: GB
  github: GitHub
  gitlab: GitLab
  group: Group
  hardware: 硬件
  healthy: 健康
  help: 帮助
  host: 主机
  hostname: 主机名
  hours: 小时
  hpa: HPA
  id: 用户 ID
  image: 镜像
  imageName: 镜像名称
  import: 导入
  internal: 内部
  ipAddress: Pod IP
  is: 是
  isRequired: 必须填写
  istioHostPlaceholder: 选择或输入主机
  istioRule: 流量规则
  key: 键
  limit: 限制
  limits: 限制
  linux: Linux
  loading: 加载中...
  loggingOut: 注销...
  loginIn: 登入
  logout: 退出用户 {user}
  mbps: Mbps
  member: 成员
  memory: 内存
  mibibyte: MiB
  milliseconds: 毫秒
  minutes: 分钟
  missing: "*%缺少%*"
  moreActions: 更多操作
  na: n/a
  name: 名称
  namespace: 命名空间
  namespaces: 命名空间
  never: 从不
  no: 否
  noBranch: 该代码库中没有任何分支。
  noData: 没有数据
  noRating: 无评价
  node: 主机
  none: 无
  owner: 所有者
  paste: 粘贴
  persistentVolume: 持久卷 (PV)
  persistentVolumeClaim: PVC
  pipeline: 项目
  pod: pod
  podRestarts: 容器重启次数
  port: 端口
  ports: 端口
  prefix: 前缀
  project: 项目
  push: 提交到代码库
  random: 随机
  readOnly: 只读
  readWrite: 读写
  registry: 镜像库
  remove: 移除
  repository: 代码库
  required: "{key} 为必填项。"
  restarts: 容器重启次数
  role: 角色
  run: 运行
  save: 保存
  saved: 已保存
  saving: 保存中
  scope: 范围
  search: 搜索
  searchOrCustomInput: 搜索或输入自定义值
  searching: 正在搜索...
  seconds: 秒
  select: 选择
  service: 服务
  services: 服务
  size: 大小
  state: 状态
  tags: 标签
  test: 测试
  testing: 测试
  to: 至
  total: 合计
  "true": "True"
  type: 类型
  unknown: 未知
  unknownUser: 无法获取用户信息
  upload: 上传
  url: URL
  user: 用户
  uuid: UUID
  value: 值
  version: 版本
  windows: Windows
  writeOnly: 只写
  yes: 是
haPage:
  header: 高可用性(HA)
  setup:
    link: 请参阅文档
    prefix: 可以在不同主机上部署多个服务器容器，以便 {appName} 一直保持运行，即使其中一个主机失败。
    suffix: 有关安装和使用信息
  table:
    address: 主机地址
    clustered: 集群
    heartbeat: 上次在线
    port: 端口
inputTextFile:
  tooltip: 从文件读取
k3sNodeEnvVarSection:
  detail: 只读取此 K3S 节点的环境变量列表。
  key: Key
  noData: 没有环境变量
  noMatch: 没有环境变量与当前搜索匹配
  title: K3S 节点环境变量
  value: Value
kontainerDriver:
  displayName:
    aliyunkubernetescontainerservice: Alibaba ACK
    amazonElasticContainerService: Amazon EKS
    azureKubernetesService: Azure AKS
    baiducloudcontainerengine: Baidu CCE
    googleKubernetesEngine: Google GKE
    huaweicontainercloudengine: Huawei CCE
    import: Import
    linodekubernetesengine: Linode LKE
    opentelekomcloudcontainerengine: Open Telekom Cloud CCE
    oraclecontainerengine: Oracle OKE
    rancherKubernetesEngine: Rancher RKE
    tencentkubernetesengine: Tencent TKE
machinePage:
  add: 添加主机驱动
  builtin: 内置
  header: 主机驱动
  inactive: 未激活
  subtext: 另外 <code>docker-machine</code> 驱动可在此加载并在添加主机界面使用。
  url: 位置
modalShowCommand:
  errors:
    token: 获取集群注册令牌错误 - {err}
  success: 主机已注册!
  title: 集群注册命令
modalYaml:
  noData: 没有 {name} 资源。
  title:
    edit: "编辑 YAML: {name}"
    new: 导入 {type}YAML
    view: "查看 YAML: {name}"
newCertificate:
  cert:
    invalidFormat: 无效的证书
    label: 证书
    placeholder: 粘贴或导入证书，以-----BEGIN CERTIFICATE-----开头
    protip: 包括全部所需的证书链
    required: 必须填写证书
    tooltip: "粘贴用于验证 server 证书的 CA 证书，它将生成在 kubecfg 文件中。 具体请参考 <a href=\"https://rancher.com/docs/rancher/v2.x/en/cluster-provisioning/rke-clusters/options/#authorized-cluster-endpoint\" target=\"blank\" >更多信息</a>。"
  certChain:
    label: 证书链
    placeholder: 粘贴或导入证书，以-----BEGIN CERTIFICATE-----开头
  errors:
    cert:
      invalidFormat: 证书无效
      required: 必须填写证书
    encrypted: 私钥不能被密码保护
    key:
      invalidFormat: 私钥无效，请确保它是 RSA 密钥。
      required: 必须填写私钥
  key:
    invalidFormat: 私钥无效
    label: 私钥
    placeholder: 粘贴或导入私钥，以-----BEGIN RSA PRIVATE KEY-----开头
    required: 必须填写私钥
  metaXML:
    label: 元数据 XML
    placeholder: 粘贴 IDP Metadata XML
  publicKey:
    invalidFormat: 公钥无效
    label: SSH 公钥
    placeholder: 粘贴或导入证书，以'ssh-rsa', 'ssh-dss', 'ssh-ed25519', 'ecdsa-sha2-nistp256', 'ecdsa-sha2-nistp384', or 'ecdsa-sha2-nistp521'开头。
    required: 必须填写公钥
  title:
    edit: "编辑证书: {name}"
    new: 添加证书
    view: "证书: {name}"
newIngress:
  error:
    noRules: 您必须有一个或多个规则。
  header:
    add: 添加规则
    edit: 编辑规则
newPipeline:
  save: 保存
  steps:
    label: 流水线配置
newPipelineStage:
  addStep: 添加步骤
  errors:
    name:
      required: 请输入名称。
  header:
    create: 添加阶段
    edit: 编辑阶段
  name:
    placeholder: "例如: compile"
  trigger:
    webhook: 推送
    webhookPR: 拉取请求
    webhookTag: 标签
projectGroup:
  label: "项目: {name}"
  noNS: 此项目下没有命名空间
  none: 命名空间
  project: 不在项目中
resourceEventList:
  detail: 当前 {resourceType} 的事件
  noData: 没有事件
  noMatch: 没有事件匹配当前搜索
  table:
    lastUpdate: 最后更新
    message: 事件信息
    namespace: 命名空间
    object: 对象
    reason: 事件原因
    type: 类型
  title: 事件
signupPage:
  emailSuccess:
    confirm:
      resend: 重新发送邮件
      subtext: 已经发送邮件到邮箱，请点击邮件中的验证链接以确认邮件地址。
    header: 欢迎使用 {appName}
  form:
    button: 注册
    labels:
      email: 电子邮箱
      loginUsername: 用户名
  header: 注册 {appName}
systemInfoSection:
  arch: 系统架构
  containerDVersion: Containerd 版本
  detail: 操作系统和 kubernetes 信息。
  dockerVersion: Docker 版本
  kernelVersion: 内核版本
  key: 键
  kubeProxyVersion: Kube 代理版本
  kubeletVersion: Kubelet 版本
  noData: 没有数据
  noMatch: 没有与当前搜索匹配的系统信息。
  operatingSystem: 操作系统映像
  osType: 系统类型
  title: 系统信息
  value: 值
upgradeBtn:
  status:
    available: 有可用更新
    current: 已经是最新版本
    error: 检查更新出错
    inprogress: 正在升级中
    loading: 正在检查更新...
    none: 无
    notfound: 未识别模板版本
    required: 需要升级
    upgraded: 完成升级
  version:
    current: 当前版本
uploadFile:
  label: 从文件读取
userPreferencesPage:
  generalInfo:
    email:
      label: 邮件地址
    header: 账号
    name:
      label: 显示名称
    password:
      text: 修改密码
    username:
      label: 用户名
  header: 设置
  menu:
    header: 菜单位置
    left: 左侧
    top: 顶部
  theme:
    auto: 自动
    autoDetail: 选择自动设置，将会在晚 6 点到次日早 6 点间自动切换到黑色主题。
    dark: 黑色
    header: 主题
    light: 明亮
validation:
  arrayLength:
    between: "\"{key}\" 应当介于 {min} 和 {max} 之间 {max, plural,=1{ 个条目 } other { 个条目 }}"
    exactly: "\"{key}\" 应当包含 {count, plural,=1{#个条目 } other {#个条目 }}"
    max: "\"{key}\" 应当至多为 {count}{count, plural,=1{ 个条目 } other { 个条目 }}"
    min: "\"{key}\" 应当至少为 {count}{count, plural,=1{ 个条目 } other { 个条目 }}"
  chars: "\"{key}\" 包含 {count, plural,=1{ 个无效字符 } other {#个无效字符 }}: {chars}"
  dns:
    doubleHyphen: 不能包含两个连续的连字符
    hostname:
      empty: "\"{key}\" 至少需一个字符"
      emptyLabel: "\"{key}\" 不能有两个连续的点"
      endDot: "\"{key}\" 不能以点结尾"
      endHyphen: "\"{key}\" 必须以字母或数字结尾"
      startDot: "\"{key}\" 不能以点开头"
      startHyphen: "\"{key}\" 必须以字母或数字开头"
      startNumber: "\"{key}\" 不能以数字开头"
      tooLong: "\"{key}\" 不能超过 {max} 个字符"
      tooLongLabel: "\"{key}\" 不能超过 {max} 个字符"
    label:
      emptyLabel: "\"{key}\" 不能为空"
      endHyphen: "\"{key}\" 必须以字母或数字结尾"
      startHyphen: "\"{key}\" 必须以字母或数字开头"
      startNumber: "\"{key}\" 不能以数字开头"
      tooLongLabel: "\"{key}\" 不能超过 {max} 字符"
  k8s:
    identifier:
      emptyLabel: "\"{key}\" 不能有空格键"
      emptyPrefix: "\"{key}\" 不能有空白的前缀"
      endLetter: "\"{key}\" 必须以字母或数字结尾"
      startLetter: "\"{key}\" 必须以字母或数字开头"
      tooLongKey: "\"{key}\" 的长度不能超过 {max} 个字符"
      tooLongPrefix: "\"{key}\" 的前缀不能超过 {max} 个字符"
  number:
    between: "\"{key}\" 应当介于 {min} 和 {max} 之间"
    exactly: "\"{key}\" 应当为 {val}"
    max: "\"{key}\" 应当至多为 {val}"
    min: "\"{key}\" 应当至少为 {val}"
  required: "\"{key}\" 必须设置"
  requiredOrOverride: "\"{key}\" 是必须的或者允许覆盖"
  stringLength:
    between: "\"{key}\" 应当介于 {min} 和 {max} 之间 {max, plural,=1{ 个字符 } other { 个字符 }}"
    exactly: "\"{key}\" 应当为 {count, plural,=1{#个字符 } other {#个字符 }}"
    max: "\"{key}\" 应当至多为 {count}{count, plural,=1{ 个字符 } other { 个字符 }}"
    min: "\"{key}\" 应当至少为 {count}{count, plural,=1{ 个字符 } other { 个字符 }}"
  targets:
    missingProjectId: 必须选择目标项目。
verifyPage:
  account:
    header: 账号创建完成
    linkText: Login
    subtext: 点击下面的链接进入登录页面。
  header: 邮件地址已验证成功!
  subtext: 在完成账号设置前，我们还需要一些信息。
